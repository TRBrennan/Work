package test;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;

public class MazeSolver {

	int lineNum = 0;
	char[][] maze; // The maze
	int width;
	int height;
	boolean[][] wasHere = new boolean[width][height];
	boolean[][] correctPath = new boolean[width][height]; // The solution to the
															// maze
	int startX, startY; // Starting X and Y values of maze
	int endX, endY; // Ending X and Y values of maze

	public void generateMaze(File file) throws IOException {

		int lineNum = 0;

		BufferedReader read = new BufferedReader(new FileReader(file));
		
		String reaWH = read.readLine();
		String[] splitWH = reaWH.split(" ");
		width = Integer.valueOf(splitWH[0]);
		height = Integer.valueOf(splitWH[1]);
		maze = new char[width][height];
		String rea = read.readLine();
		String readline;
		int num = 0;
		char value = 0;
		while ((readline = read.readLine()) != null) {
			
			String[] split = rea.split(" ");
			if (lineNum == 0) {
				width = Integer.valueOf(split[0]);
				height = Integer.valueOf(split[1]);
			} else if (lineNum == 1) {
				startX = Integer.valueOf(split[0]);
				startY = Integer.valueOf(split[1]);

			} else if (lineNum == 2) {
				endX = Integer.valueOf(split[0]);
				endY = Integer.valueOf(split[1]);
			} else {
				char[] ch = readline.toCharArray();
	            for(int i = 0;i < ch.length;i++){            	
	            	if(ch[i] == 1){
	            		value = '#';
	            	} else if(ch[i] == 0){
	            		value =' ';
	            	}
	                maze[i][num] = value;
	            }
	            num++;
			}
			lineNum++;
		}
	

	}

	public void solveMaze() throws IOException {
		generateMaze(null); // Create Maze (1 = path, 2 = wall)
		for (int row = 0; row < maze.length; row++)
			// Sets boolean Arrays to default values
			for (int col = 0; col < maze[row].length; col++) {
				wasHere[row][col] = false;
				correctPath[row][col] = false;
			}
		boolean b = recursiveSolve(startX, startY);
		// Will leave you with a boolean array (correctPath)
		// with the path indicated by true values.
		// If b is false, there is no solution to the maze
	}

	public boolean recursiveSolve(int x, int y) {
		if (x == endX && y == endY)
			return true; // If you reached the end
		if (maze[x][y] =='#' || wasHere[x][y])
			return false;
		// If you are on a wall or already were here
		wasHere[x][y] = true;
		if (x != 0) // Checks if not on left edge
			if (recursiveSolve(x - 1, y)) { // Recalls method one to the left
				correctPath[x][y] = true; // Sets that path value to true;
				return true;
			}
		if (x != width - 1) // Checks if not on right edge
			if (recursiveSolve(x + 1, y)) { // Recalls method one to the right
				correctPath[x][y] = true;
				return true;
			}
		if (y != 0) // Checks if not on top edge
			if (recursiveSolve(x, y - 1)) { // Recalls method one up
				correctPath[x][y] = true;
				return true;
			}
		if (y != height - 1) // Checks if not on bottom edge
			if (recursiveSolve(x, y + 1)) { // Recalls method one down
				correctPath[x][y] = true;
				return true;
			}
		return false;
	}
	
	public static void main(String args[]) throws IOException{
	
		MazeSolver genMaze = new MazeSolver();
		File f = new File("maze.txt");
		System.out.println(f.getAbsolutePath());
		genMaze.generateMaze(f);
		
		System.out.println("Maze: " + genMaze.maze);
		System.out.println("Height: " + genMaze.height + "Width: " + genMaze.width);
		System.out.println("StartX: " + genMaze.startX + "StartY: " + genMaze.startY);
		System.out.println("endX: " + genMaze.endX + "endY: " + genMaze.endY);
		
		
	}

}
